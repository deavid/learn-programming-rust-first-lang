{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qu16 is used for storing UTF16 characters, which are 2 byte long.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qu32 can be used to store colors of pixels of an image (Red, Green, Blue and Alpha)\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QYou cannot have an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q without an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QLet's see an example with an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q:\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QIt's important to run this with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or it will take a bit too long to compute.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QYou see, 3+5 is 8, but \"Base\"+\"ment\" is \"Basement\".\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QSome operators like dividing (/) make sense on numbers (8/2=4) but don't make any sense on texts (\"Base\"/\"ment\" = ????).\\E$"}
{"rule":"NODT_DOZEN","sentence":"^\\QGiga just means billion.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QGiga just means billion.\\E$"}
{"rule":"A_NUMBER_NNS","sentence":"^\\QYour computer has so much memory that it doesn't care if a number uses 1 byte or 8.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Q\"f\" for float, and 32 or 64 for the amount of memory that they use.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qstr\nString\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWe will use String for our variables, as it is simpler to use, but in some cases, Rust wants a \"str\" instead.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qf32 can record 6 digits correctly (and a few extra ones) while f64 can record more than 12.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QDepending on the problem at hand an f64 might be required, while in others f32 might be better as it has enough precision but it is smaller, allowing for much complex simulations.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QDepending on the problem at hand an f64 might be required, while in others f32 might be better as it has enough precision, but it is smaller, allowing for much complex simulations.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QIntroducing Functions\nReturning values from functions\nFunction arguments\nData types\nRust data types\nBack to declaring variables… with type\nConverting types with explicit conversions\nA tiny bit on strings\nSimple explanation on &str vs String\nHaving fun with libraries\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QMove left 30 pixels.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QMove bottom 30 pixels.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAnd let's face it, the console is booooring.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QIntroducing Functions\nReturning values from functions\nFunction arguments\nData types\nRust data types\nBack to declaring variables… with type\nConverting types with explicit conversions\nA tiny bit on strings\nSimple explanation on &str vs String\nHaving fun with libraries\nNot everything are numbers and texts: Structs\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QSee TMTLA.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QBorrowing\nPolymorphism\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QBorrowing\nLifetimes\nPolymorphism\\E$"}
{"rule":"PASSIVE_VOICE","sentence":"^\\QThe other type of loop is called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and does the same as `loop\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QEvery time we call \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q it returns an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q that can be either \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"SENT_START_NUM","sentence":"^\\Q12 (hours): Even will happen in 12 hours.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QIf something fails, it will return an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThis doesn't work because \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q will return a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and not an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q:\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QSince it is an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, it can take billions of different numbers, either positive or negative, and for each one we can specify what to do in each case.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QStandard Error  (stderr): Here the program sends error messages, usually they appear in the console too.\\E$"}
{"rule":"PASSIVE_VOICE","sentence":"^\\QAlso, floats were invented for scientific purposes, like sending people to the moon.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QOther types of loops\nTurtle: Improving with loops\nTurtle: Making a spiral\nLevel: Apprentice\nIntroducing Functions\nReturning values from functions\nFunction arguments\nData types\nRust data types\nBack to declaring variables… with type\ndbg!() and format!()\nConverting types with explicit conversions\nA tiny bit on strings\nSimple explanation on &str vs String\nA bit more detailed explanation on functions\nClosures\nHaving fun with libraries\nProject: A simple game with Macroquad\nLevel: Adept\nNot everything are numbers and texts: Structs\nStruct-specific functions, really?\\E$"}
